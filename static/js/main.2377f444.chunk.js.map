{"version":3,"sources":["components/timer/index.js","App.js","serviceWorker.js","index.js"],"names":["Timer","time","autoStart","onTick","step","onTimeEnd","onTimeStart","onTimePause","useState","seconds","setSeconds","isRunning","setIsRunning","useEffect","id","window","setInterval","clearInterval","className","disabled","onClick","App","console","log","timeLeft","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kQA0DeA,G,MAvDD,SAAC,GAA0E,IAAzEC,EAAwE,EAAxEA,KAAMC,EAAkE,EAAlEA,UAAWC,EAAuD,EAAvDA,OAAQC,EAA+C,EAA/CA,KAAMC,EAAyC,EAAzCA,UAAWC,EAA8B,EAA9BA,YAAaC,EAAiB,EAAjBA,YAAiB,EACtDC,mBAASP,GAD6C,mBAC7EQ,EAD6E,KACpEC,EADoE,OAElDF,mBAASN,GAFyC,mBAE7ES,EAF6E,KAElEC,EAFkE,KAoBpF,OAhBAC,qBAAU,WACN,GAAIF,EAAW,CACX,IAAMG,EAAKC,OAAOC,aAAY,WAC1BN,GAAW,SAAAD,GAAO,OAAIA,EAAQ,KAC9BN,EAAOM,KACRL,GAMH,OAJe,IAAZK,IACCG,GAAa,GACbP,KAEG,kBAAMU,OAAOE,cAAcH,OAGvC,CAACH,EAAWF,EAASN,EAAQC,EAAMC,IAGlC,yBAAKa,UAAU,kBACX,yBAAKA,UAAU,SACX,yBAAKA,UAAU,QAAQT,GACvB,4BACEU,UAAWR,GAAyB,IAAZF,EACxBS,UAAU,MACVE,QAAS,WACLR,GAAa,GACbF,EAAWT,KALjB,UAUJ,yBAAKiB,UAAU,WAEPP,EAEI,4BAAQO,UAAU,aAAaE,QAAS,WACpCR,GAAa,GACbL,MACD,uBAAGW,UAAU,kBAGhB,4BAAQA,UAAU,aAAaE,QAAS,WACpCR,GAAa,GACbN,MACD,uBAAGY,UAAU,qB,MC/BzBG,MAff,WACE,OACE,yBAAKH,UAAU,OACb,kBAAC,EAAD,CAAOjB,KAAK,KACZC,WAAW,EACXC,OAAQ,SAACF,GAAD,OAAUqB,QAAQC,IAAI,gGAAuBtB,IACrDG,KAAK,OACLC,UAAW,kBAAMiB,QAAQC,IAAI,mEAC7BjB,YAAa,SAACkB,GAAD,OAAcF,QAAQC,IAAI,qFACvChB,YAAa,SAACiB,GAAD,OAAcF,QAAQC,IAAI,0FCDzBE,QACW,cAA7BV,OAAOW,SAASC,UAEe,UAA7BZ,OAAOW,SAASC,UAEhBZ,OAAOW,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnB,QAAQmB,MAAMA,EAAMC,c","file":"static/js/main.2377f444.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport \"../timer/style.css\"\r\n\r\nconst Timer = ({time, autoStart, onTick, step, onTimeEnd, onTimeStart, onTimePause}) => {\r\n    const [seconds, setSeconds] = useState(time);\r\n    const [isRunning, setIsRunning] = useState(autoStart);\r\n\r\n    useEffect(() => {\r\n        if (isRunning) {\r\n            const id = window.setInterval(() => {\r\n                setSeconds(seconds => seconds-1);\r\n                onTick(seconds);\r\n            }, step)\r\n\r\n            if(seconds === 0) {\r\n                setIsRunning(false)\r\n                onTimeEnd()\r\n            }\r\n            return () => window.clearInterval(id);\r\n        }\r\n        return undefined;\r\n    }, [isRunning, seconds, onTick, step, onTimeEnd, ]);\r\n\r\n    return(\r\n        <div className=\"timer__wrapper\">\r\n            <div className=\"timer\">\r\n                <div className=\"time\">{seconds}</div>\r\n                <button\r\n                  disabled={!isRunning && seconds !== 0}\r\n                  className=\"btn\"\r\n                  onClick={() => {\r\n                      setIsRunning(false);\r\n                      setSeconds(time);\r\n                  }}>\r\n                      Reset\r\n                </button>\r\n            </div>\r\n            <div className=\"buttons\">\r\n                {\r\n                    isRunning \r\n                    ? (\r\n                        <button className=\"action btn\" onClick={() => {\r\n                            setIsRunning(false);\r\n                            onTimePause();\r\n                        }}><i className=\"fas fa-pause\"></i></button>\r\n                    )\r\n                    : (\r\n                        <button className=\"action btn\" onClick={() => {\r\n                            setIsRunning(true);\r\n                            onTimeStart();\r\n                        }}><i className=\"fas fa-play\"></i></button> \r\n                    )\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Timer","import React from 'react';\nimport Timer from './components/timer';\nimport '../src/App.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Timer time=\"60\"\n      autoStart={false}\n      onTick={(time) => console.log(\"Осталось времени: \" + time)}\n      step=\"1000\"\n      onTimeEnd={() => console.log(\"Время вышло!\")}\n      onTimeStart={(timeLeft) => console.log(\"Таймер запущен!\")}\n      onTimePause={(timeLeft) => console.log(\"Таймер на паузе!\")}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}